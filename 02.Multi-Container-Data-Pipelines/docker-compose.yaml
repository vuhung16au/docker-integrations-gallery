# Multi-Container Data Pipeline with Docker Compose
# This setup demonstrates a complete data science pipeline with:
# - PostgreSQL database for data storage
# - Data preparation service
# - Model training service  
# - Model serving service

# version: '3.8'

services:
  # PostgreSQL database service
  database:
    image: postgres:13
    container_name: ml-database
    environment:
      POSTGRES_DB: dsproject
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dsproject"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # Data preparation service
  data-prep:
    build: .
    container_name: ml-data-prep
    environment:
      - DB_HOST=database
      - POSTGRES_DB=dsproject
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_PORT=5432
    depends_on:
      database:
        condition: service_healthy
    command: ["python", "prepare_data.py"]
    networks:
      - ml-network
    restart: "no"

  # Model training service
  model-train:
    build: .
    container_name: ml-model-train
    environment:
      - DB_HOST=database
      - POSTGRES_DB=dsproject
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_PORT=5432
    depends_on:
      database:
        condition: service_healthy
      data-prep:
        condition: service_completed_successfully
    command: ["python", "train_model.py"]
    volumes:
      - model_data:/app
    networks:
      - ml-network
    restart: "no"

  # Model serving service
  model-serve:
    build: .
    container_name: ml-model-serve
    environment:
      - DB_HOST=database
      - POSTGRES_DB=dsproject
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_PORT=5432
      - PORT=5000
    depends_on:
      database:
        condition: service_healthy
      model-train:
        condition: service_completed_successfully
    ports:
      - "5000:5000"
    volumes:
      - model_data:/app
    command: ["python", "serve_model.py"]
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  model_data:
    driver: local

# Custom network for service communication
networks:
  ml-network:
    driver: bridge